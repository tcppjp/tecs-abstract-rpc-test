# -*- coding: utf-8 -*-
#
#   TOPPERS/HRP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       High Reliable system Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015-2018 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: target_kernel.trb 648 2019-01-14 05:26:19Z ertl-hiro $
# 

# 
#		パス2の生成スクリプトのターゲット依存部（ダミーターゲット用）
#

#
#  使用できる割込み番号とそれに対応する割込みハンドラ番号
# 
$INTNO_VALID = [ *(0..31) ]
$INHNO_VALID = $INTNO_VALID

# 
#  使用できるCPU例外ハンドラ番号
# 
$EXCNO_VALID = [ *(0..7) ]

#
#  保護ドメイン初期化コンテキストブロック
#

# カーネルドメインの保護ドメイン初期化コンテキストブロック
$kernelDominictxb = "{ 0 }"

# 保護ドメイン初期化コンテキストブロックの生成
def GenerateDominictxb(key, params)
  return("{ 0 }")
end

#
#  スタートアップモジュールの定義
# 
$START_OBJS = [ "start.o" ]

#
#  コンパイラが必ず用いるライブラリの定義
# 
$TARGET_LIBS = [ "libgcc.a" ]

# 
#  標準のセクションの定義
#
$defaultSections = [
  { SECNAME: ".text",   MEMREG: :stdrom, MEMATR: $mematrTextSec },
  { SECNAME: ".rodata", MEMREG: :stdrom, MEMATR: $mematrRodataSec },
  { SECNAME: ".data",   MEMREG: :stdram, MEMATR: $mematrDataSec },
  { SECNAME: ".bss",    MEMREG: :stdram, MEMATR: $mematrBssSec },
  { SECNAME: ".noinit", MEMREG: :stdram, MEMATR: $mematrNoinitSec }
]

#
#  ATT_SECで登録できないセクション名の定義
#
$targetStandardSecnameList = [ "COMMON", ".system_stack" ]

#
#  ユーザスタック領域のセクション名と確保方法
#
def SecnameUserStack(tskid)
  return(".ustack_#{tskid}")
end

def AllocUserStack(stack, size, secname)
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  $kernelCfgC.add("static STK_T #{stack}[COUNT_STK_T(#{ustksz})] " \
					"__attribute__((section(\"#{secname}\"),nocommon));")
  return("ROUND_STK_T(#{ustksz})")
end

# レッドゾーン方式におけるダミースタック領域の確保
def AllocDummyUserStack(stack, size, secname)
  # staticを付けると，コンパイラが，この変数を参照していないという警告
  # を出し，場合によっては変数を削除するため，staticを付けない．
  ustksz = (size + $CHECK_USTKSZ_ALIGN - 1) & ~($CHECK_USTKSZ_ALIGN - 1)
  $kernelCfgC.add("STK_T #{stack}[COUNT_STK_T(#{ustksz})] " \
					"__attribute__((section(\"#{secname}\"),nocommon));")
end

#
#  システムスタック領域の確保方法
#
def AllocSystemStack(stack, size)
  $kernelCfgC.add("static STK_T #{stack}[COUNT_STK_T(#{size})] " \
					"__attribute__((section(\".system_stack\"),nocommon));")
  return("ROUND_STK_T(#{size})")
end

#
#  固定長メモリプール領域のセクション名の確保方法
#
def SecnameUserMempfix(mpfid)
  return(".mpf_#{mpfid}")
end

def AllocUserMempfix(mpf, blkcnt, blksz, secname)
  $kernelCfgC.add("static MPF_T #{mpf}[(#{blkcnt}) * COUNT_MPF_T(#{blksz})] " \
					"__attribute__((section(\"#{secname}\"),nocommon));")
end

#
#  ターゲット依存のメモリオブジェクト情報の操作
#
def TargetMemoryObject()
  if $TOPPERS_ML_AUTO
    # カーネルドメインに.system_stackセクションを登録する．
    params = {}
    params[:type] = :ATTSEC
    params[:linker] = true
    params[:domain] = $TDOM_KERNEL
    params[:memreg] = $standardMemreg[$TDOM_KERNEL][:stdram]
    params[:secname] = ".system_stack"
    if defined?($targetMematrSstack)
      params[:mematr] = $targetMematrSstack
    else
      params[:mematr] = $mematrNoinitSec
    end
    params[:acptn1] = $defaultAcptn[$TDOM_KERNEL]
    params[:acptn2] = $defaultAcptn[$TDOM_KERNEL]
    params[:acptn4] = $defaultAcptn[$TDOM_KERNEL]
    $memObj[$lastMOKey += 1] = params
  end
end

#
#  ターゲット非依存部のインクルード
#
IncludeTrb("kernel/kernel.trb")

if $TOPPERS_ML_AUTO
  #
  #  自動メモリ配置の場合
  #

  #
  #  仮のリンカスクリプトの生成
  #
  $ldscript = GenFile.new("cfg2_out.ld")
  $modnameReplace = { "kernel_mem.o" => "kernel_mem2.o" }
  IncludeTrb("target_ldscript.trb")
else
  #
  #  手動メモリ配置の場合
  #

  #
  #  メモリ保護単位に関する情報を生成する
  #
  GenerateMemProt()
end
