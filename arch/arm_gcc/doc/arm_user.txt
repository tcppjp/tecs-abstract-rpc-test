
		TOPPERS/HRP3カーネル
		ARM依存部 ユーザーズマニュアル

		対応バージョン: Release 3.1
		最終更新: 2019年2月3日

このドキュメントは，TOPPERS/HRP3カーネルのARM依存部を使用するために必
要な事項を説明するものである．

----------------------------------------------------------------------
 TOPPERS/HRP Kernel
     Toyohashi Open Platform for Embedded Real-Time Systems/
     High Reliable system Profile Kernel

 Copyright (C) 2018,2019 by Embedded and Real-Time Systems Laboratory
             Graduate School of Information Science, Nagoya Univ., JAPAN
 
 上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
     権表示，この利用条件および下記の無保証規定が，そのままの形でソー
     スコード中に含まれていること．
 (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
     用できる形で再配布する場合には，再配布に伴うドキュメント（利用
     者マニュアルなど）に，上記の著作権表示，この利用条件および下記
     の無保証規定を掲載すること．
 (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
     用できない形で再配布する場合には，次のいずれかの条件を満たすこ
     と．
   (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
       作権表示，この利用条件および下記の無保証規定を掲載すること．
   (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
       報告すること．
 (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
     害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
     また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
     由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
     免責すること．
 
 本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 の責任を負わない．
 
 $Id: arm_user.txt 689 2019-03-20 06:39:35Z ertl-hiro $
----------------------------------------------------------------------

○目次

０．本マニュアルの位置づけ
１．ARM依存部の概要
	1.1 ARMコア依存部
２．ターゲット定義事項の規定
	2.1 サポートできる機能
	2.2 メモリオブジェクト管理に関する規定
	2.3 CPU例外処理に関する規定
	2.4 タイマに関する規定
		2.4.1 MPCoreチップ依存部におけるタイマに関する規定
			2.4.1.1 プライベートタイマでタイムウィンドウタイマを実現
		2.4.2 RZ/A1チップ依存部におけるタイマに関する規定
	2.5 その他の規定・制約
３．使用上の注意とヒント
４．リファレンス
	4.1 ディレクトリ構成・ファイル構成
	4.2 バージョン履歴


０．本マニュアルの位置づけ

TOPPERS/HRP3カーネルのARM依存部は，TOPPERS/ASP3カーネル（以下，ASP3カー
ネル）のARM依存部を拡張する形で開発したものであり，その使用方法もASP3
カーネルのARM依存部とほぼ同様である．現時点では，ASP3カーネルのARM依存
部 ユーザーズマニュアルと重複する事項についてはこのマニュアルに記述し
ていないため，このマニュアルを読む際には，ASP3カーネルのマニュアルもあ
わせて読むこと．


１．ARM依存部の概要

1.1 ARMコア依存部

HRP3カーネルのARMコア依存部は，ARMv6およびARMv7-Aに準拠したMMUを持つプ
ロセッサコアを持つターゲットシステム（チップ）に共通に使用できる部分で
ある．ARMv5には，ソースコードでは対応しているが，現時点では，動作テス
トを行っていない（MMUの仕様は，ARMv5以前とARMv6以降でかなり違っている）．

また，現時点では，GNU開発環境のみに対応している．


２．ターゲット定義事項の規定

2.1 サポートできる機能

ARMコア依存部では，自動メモリ配置と手動メモリ配置の両方に対応している．
また，ATT_MODとATT_PMAをサポートしている．

2.2 メモリオブジェクト管理に関する規定

ARMのMMUでは，ページサイズは4KBである．メモリリージョンの先頭番地とサ
イズは，ページサイズの倍数でなければならない．そのため，ATT_REGで登録
するメモリ領域の先頭番地とサイズも，ページサイズの倍数でなければならな
い．そうでない場合は，E_PARエラーとなる．

また，メモリ保護の単位となるメモリオブジェクトの先頭番地とサイズも，ペー
ジサイズの倍数でなければならない．そのため，ATT_MEM／ATT_PMAで登録する
メモリ領域の先頭番地とサイズ，ATT_PMAで指定する登録するメモリ領域の物
理アドレス空間における先頭番地も，ページサイズの倍数でなければならない．
そうでない場合は，E_PARエラーとなる．

タスクのユーザスタック領域は，そのタスクからだけではなく，それが属する
保護ドメイン全体からアクセスできるものとしている．ユーザスタックのオー
バフローを確実に検出するために，レッドゾーン方式を用いている．

ARMのMMUでは，メモリ領域に対する読出しアクセスは，単独では制御できない．
そのため，メモリオブジェクト属性にTA_NOREADを設定した場合や，アクセス
許可ベクタで書込みアクセス許可・読出しアクセス禁止に設定した場合，コン
フィギュレータは警告メッセージを出して，読出しアクセス禁止の設定を無視
する．ただし，メモリオブジェクトとして登録されないメモリ領域
（TA_NOWRITE属性とTA_NOREAD属性を指定し，TA_EXEC属性を指定しないメモリ
領域）に対するTA_NOREADの指定は有効である．

ARMコア依存では，MMUのページテーブルに設定するアクセス属性を，メモリオ
ブジェクト属性から決定している．そこで，ターゲット定義のメモリオブジェ
クト属性として，次の3つを追加している．

	TA_SORDER		0x100		ストロングオーダアクセス
	TA_WTHROUGH		0x200		ライトスルーキャッシュ
	TA_NONSHARED	0x400		プロセッサ間で非共有

これらのメモリオブジェクト属性はすべて，メモリオブジェクトアクセス属性
に該当する．

ARM MMUのページテーブルに設定するアクセス属性は，メモリオブジェクトア
クセス属性（およびアクセス許可ベクタ）から，次のように定める．

・APビット（Access Permission）は，TA_NOWRITE属性と，ユーザドメインか
  らどのようなアクセスが許可されているか（アクセス許可ベクタで判定）か
  ら，次の表に従って設定する．

	TA_NOWRITE		アクセス許可			|	AP
	----------------------------------------+-------
	設定あり		読出し許可				|	111
	設定あり		アクセス不可			|	101
	設定なし		書込み／読出し許可		|	011
	設定なし		読出し許可				|	010
	設定なし		アクセス不可			|	010

・TEX,C,Bビット（Memory Region Attribute）は，TA_SRODER属性，TA_IODEV
  属性，TA_UNCACHE属性，TA_WTHROUGH属性の4つの属性から，次の表に従って
  設定する．

	TA_SRODER	TA_IODEV	TA_UNCACHE	TA_WTHROUGH	|	TEX[2:0],C,B
	------------------------------------------------+---------------
	設定あり	−			−			−			|	000,0,0
	設定なし	設定あり	−			−			|	000,0,1(*1)
	設定なし	設定なし	設定あり	−			|	001,0,0
	設定なし	設定なし	設定なし	設定あり	|	000,1,0
	設定なし	設定なし	設定なし	設定なし	|	001,1,1

  (*1) TA_NONSHARED属性が設定されている場合には，010,0,0とする．

・XNビット（Execute-Never）は，TA_EXEC属性が設定されている場合には0に，
  そうでない場合には1に設定する．

・Sビット（Shareable）は，TA_NONSHARED属性が設定されている場合には0に，
  そうでない場合には1に設定する．

・nGビット（Not Global）は，通常操作1と通常操作2のアクセス許可パターン
  がいずれもTACP_KERNELまたはTACP_SHAREDであれば0に，そうでない場合に
  は1に設定する．

2.3 CPU例外処理に関する規定

ARMコア依存部では，ソフトウェア割込みによるサービスコール呼出しに，svc
命令（スーパバイザコール命令）を用いている．その際，svc命令のオペラン
ド（即値）を，SVC_SERVICE_CALL（＝1）としている．また，システム周期オー
バラン例外の発生にも，オペランドをSVC_SCYCOVR（＝2）とするsvc命令を用
いている．

そのため，スーパバイザコール（EXCNO_SVC）に対してDEC_EXCにより登録した
CPU例外ハンドラが実行されるのは，上記の2つ以外の値をオペランドとして
svc命令を発行した場合のみである．

ARMでは，許可されていない実行アクセスを行おうとした場合，プリフェッチ
アボート（EXCNO_PABORT）が発生する．また，許可されていない書込みアクセ
スまたは読出しアクセスを行おうとした場合，データアボート（EXCNO_DABORT）
が発生する．これらに対してDEC_EXCにより登録したCPU例外ハンドラで，アク
セス違反に対する例外処理を行うことができる．

システム周期オーバラン例外に対するCPU例外ハンドラを定義する場合には，
CPU例外ハンドラ番号をEXCNO_SCYCOVR（＝6）として，DEF_EXCにより登録する．
このCPU例外ハンドラからリターンすると，カーネルは，システム周期オーバ
ラン例外を無視して実行を継続する．

2.4 タイマに関する規定

2.4.1 MPCoreチップ依存部におけるタイマに関する規定

MPCore依存部では，プロセッサ毎に持つプライベートタイマとウォッチドッグ，
各プロセッサからアクセスできるグローバルタイマを用いて，カーネルが必要
とする3種類のタイマを実現している．具体的には，以下の4種類の使用方法を
サポートしている．

 (a) プライベートタイマとウォッチドッグで高分解能タイマを実現
 (b) グローバルタイマで高分解能タイマを実現
 (c) プライベートタイマでタイムウィンドウタイマを実現
 (d) ウォッチドッグでオーバランタイマを実現

この内，(a)(b)(d)は，ASP3カーネルにおける(a)(b)(c)と同じであるため，以
下では，(c)の使用方法について説明する．なお，(b)と(c)と(d)は同時に用い
ることができる．

2.4.1.1 プライベートタイマでタイムウィンドウタイマを実現

プライベートタイマを用いて，タイムウィンドウタイマを実現する．

プライベートタイマのクロック源の周波数が256MHz以下の場合には，プリスケー
ラを用いて1MHzのクロックを作り，プライベートタイマを1MHzで駆動する．こ
の場合には，ターゲット依存部でmpcore_timer.hをインクルードする前に，次
のマクロを定義する必要がある．

	USE_MPCORE_TMW_TWDTIMER プライベートタイマでオーバランタイマを実現
							することを指定
	MPCORE_TMR_PS_VALUE		プライベートタイマのプリスケーラの設定値

プリスケーラの設定値は，分周比（クロック源のMHz単位での周波数）から1を
減じたものに定義する．

プライベートタイマのクロック源の周波数が256MHzを超える場合には，プリス
ケーラで1MHzのクロックを作ることができない．そこで，プリスケーラで作る
ことができる1MHzの倍数の周波数（これを，N MHzとする）を選び，プライベー
トタイマをN MHzで駆動する．この時，target_kernel.h（または，そこからイ
ンクルードされるファイル）で定義すべきタイムウィンドウの長さに指定でき
る最大値（TMAX_TWDTIM）は，2^32/N（小数点以下は切り捨て）になる．また，
ターゲット依存部でmpcore_timer.hをインクルードする前に，上述のマクロに
加えて，次のマクロを定義する必要がある．

	MPCORE_TMR_FREQ			プライベートタイマの駆動周波数

2.4.2 RZ/A1チップ依存部におけるタイマに関する規定

RZ/A1チップ依存部では，RZ/Aシリーズが持つ2チャンネルのOSタイマの内の1
つ（OSタイマ0）を用いて高分解能タイマを，もう1つ（OSタイマ1）を用いて
タイムウィンドウまたはオーバランタイマを実現している．タイムウィンドウ
タイマとオーバランタイマを同時に使用することはできない．

現在の実装では，OSタイマに供給されるクロックが33.33…MHz（CPUのクロッ
クが400MHz）の場合のみに対応している．この場合，タイムウィンドウの長さ
に指定できる最大値（TMAX_TWDTIM）およびオーバランハンドラの残りプロセッ
サ時間に指定できる最大値（TMAX_OVRTIM）は，128,849,017である．

2.5 その他の規定・制約

タスクのユーザスタック領域の先頭番地とサイズは，4096（4K）の倍数でなけ
ればならない．タスクのシステムスタック領域と非タスクコンテキスト用のス
タック領域の先頭番地とサイズは，8の倍数でなければならない．

ターゲット定義の予約セクションとして，次の3つのセクションを使用する．
これらをATT_SECで登録することはできない．

	.system_stack		タスクのシステムスタック領域や非タスクコンテキ
						スト用のスタック領域を配置するセクション
	.page_table			アドレス変換テーブルを配置するセクション
	.shared_code		すべての保護ドメインから呼び出すコード（共有ラ
						イブラリ）を配置するセクション

動的生成機能拡張パッケージの使用時に，acre_tskでユーザタスクを生成する
際に設定するユーザスタック領域は，そのタスクが属する保護ドメインに対し
て書込みアクセスと読出しアクセスが許可されているメモリオブジェクトに含
まれていなければならない．また，その先頭番地とサイズは，（4096ではなく）
8の倍数であれば良い．


３．使用上の注意とヒント

HRP3カーネルでは，MMUの設定はARMコア依存部で行うため，ARMコア依存部を
使用するターゲット依存部で行うべきことはない．そのため，ASP3カーネルの
ARM依存部 ユーザーズマニュアルの「3.1 MMUの設定」の節の内容は適用され
ない．


４．リファレンス

4.1 ディレクトリ構成・ファイル構成

	arm_gcc/
		MANIFEST				個別パッケージのファイルリスト

	arm_gcc/common/
		Makefile.core			Makefileのコア依存部
		arm.c					コアのハードウェア資源の操作
		arm.h					コアのハードウェア資源の定義
		arm_insn.h				コア独自の命令の実行
		arm_mmu.trb				ARM MMUのアドレス変換テーブルの作成
		cfg1_out.ld				パス1のためのリンカスクリプト
		core_asm.inc			アセンブラ記述のためのマクロ
		core_cfg1_out.h			cfg1_out.cのリンクに必要なスタブの定義
		core_check.trb			kernel_check.trbのコア依存部
		core_kernel.h			kernel.hのコア依存部
		core_kernel.trb			kernel.trbのコア依存部
		core_kernel_impl.c		カーネル実装のコア依存部関連の定義
		core_kernel_impl.h		カーネル実装のコア依存部
		core_mem.trb			パス4の生成スクリプトのコア依存部
		core_offset.trb			genoffset.trbのコア依存部
		core_opt.trb			パス3の生成スクリプトのコア依存部
		core_rename.def			コア依存部の内部識別名のリネーム定義
		core_rename.h			コア依存部の内部識別名のリネーム
		core_sil.h				sil.hのコア依存部
		core_stddef.h			t_stddef.hのコア依存部
		core_support.S			カーネル実装のコア依存部（アセンブリ言語
								で記述した部分）
		core_svc.h				ソフトウェア割込みによるサービスコール呼出し
 		core_sym.def			kernel_sym.defのコア依存部
		core_syssvc.h			システムサービスのコア依存定義
		core_test.h				テストプログラムのコア依存定義
		core_unrename.h			コア依存部の内部識別名のリネーム解除
		gic_kernel_impl.c		カーネル実装のGIC依存部関連の定義
		gic_kernel_impl.h		カーネル実装のGIC依存部
		gic_support.S			カーネル実装のGIC依存部関連（アセンブリ言
								語で記述した部分）
		pl310.c					L2キャッシュコントローラ（PL310）の操作ライ
								ブラリ
		pl310.h					L2キャッシュコントローラ（PL310）に関する定義
		sp804.h					ARM Dual-Timer Module（SP804）に関する定義
		start.S					カーネル用のスタートアップモジュール（ARM用）
		tUartPL011.c			ARM PrimCell UART（PL011）用 簡易SIOドライバ
		tUartPL011.cdl			ARM PrimCell UART（PL011）用 簡易SIOドライ
								バのコンポーネント記述
		uart_pl011.h			ARM PrimCell UART（PL011）に関する定義

	arm_gcc/mpcore/
		MANIFEST				MPCore依存部のファイルリスト
		Makefile.chip			Makefileのチップ依存部
		chip_kernel.h			kernel.hのチップ依存部
		chip_kernel_impl.c		カーネル実装のチップ依存部関連の定義
		chip_kernel_impl.h		カーネル実装のチップ依存部
		chip_rename.def			チップ依存部の内部識別名のリネーム定義
		chip_rename.h			チップ依存部の内部識別名のリネーム
		chip_stddef.h			t_stddef.hのチップ依存部
		chip_timer.c			タイマドライバ
		chip_timer.cfg			タイマドライバのコンフィギュレーションファイル
		chip_timer.h			タイマドライバを使用するための定義
		chip_unrename.h			チップ依存部の内部識別名のリネーム解除
		mpcore.h				チップのハードウェア資源の定義

	arm_gcc/rza1/
		MANIFEST				RZ/A1依存部のファイルリスト
		Makefile.chip			Makefileのチップ依存部
		chip_kernel.h			kernel.hのチップ依存部
		chip_kernel.trb			kernel.trbのチップ依存部
		chip_kernel_impl.c		カーネル実装のチップ依存部関連の定義
		chip_kernel_impl.h		カーネル実装のチップ依存部
		chip_rename.def			チップ依存部の内部識別名のリネーム定義
		chip_rename.h			チップ依存部の内部識別名のリネーム
		chip_stddef.h			t_stddef.hのチップ依存部
		chip_sym.def			kernel_sym.defのチップ依存部
		chip_timer.c			タイマドライバ
		chip_timer.cfg			タイマドライバのコンフィギュレーションファイル
		chip_timer.h			タイマドライバを使用するための定義
		chip_unrename.h			チップ依存部の内部識別名のリネーム解除
		rza1.h					チップのハードウェア資源の定義
		scif.h					シリアルインタフェースに関する定義
		tSCIF.c					シリアルインタフェース用 簡易SIOドライバ
		tSCIF.cdl				シリアルインタフェース用 簡易SIOドライバ
								のコンポーネント記述

	arm_gcc/doc/
		arm_user.txt			ARM依存部 ユーザーズマニュアル
		hrp3_arm_design.txt		ARMコア依存部 設計メモ

4.2 バージョン履歴

	2018年4月20日	Release	3.0.0		最初の一般公開
	2019年3月20日	Release	3.1.0		FPUサポートを追加

以上
